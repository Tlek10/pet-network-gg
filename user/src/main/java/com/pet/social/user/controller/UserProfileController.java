package com.pet.social.user.controller;

import com.pet.social.user.dto.UserProfileDTO;
import com.pet.social.user.service.UserProfileService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserProfileController {

    private final UserProfileService userProfileService;

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @GetMapping
    public ResponseEntity<List<UserProfileDTO>> getAllUsers() {
        return ResponseEntity.ok(userProfileService.getAllProfiles());
    }

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    @GetMapping("/{username}")
    public ResponseEntity<UserProfileDTO> getUser(@PathVariable String username) {
        return ResponseEntity.ok(userProfileService.getByUsername(username));
    }

    // üîπ –°–æ–∑–¥–∞–Ω–∏–µ/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @PutMapping("/{username}")
    public ResponseEntity<UserProfileDTO> updateUser(@PathVariable String username,
                                                     @RequestBody UserProfileDTO dto,
                                                     @AuthenticationPrincipal User currentUser) {
        // –ó–∞—â–∏—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        if (!currentUser.getUsername().equals(username)) {
            return ResponseEntity.status(403).build();
        }

        return ResponseEntity.ok(userProfileService.updateUserProfile(username, dto));
    }

    // üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @DeleteMapping("/{username}")
    public ResponseEntity<Void> deleteUser(@PathVariable String username,
                                           @AuthenticationPrincipal User currentUser) {
        if (!currentUser.getUsername().equals(username)) {
            return ResponseEntity.status(403).build();
        }

        userProfileService.deleteUserProfile(username);
        return ResponseEntity.noContent().build();
    }

    // üîπ –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
    @PostMapping("/{username}/friends/{friendUsername}")
    public ResponseEntity<UserProfileDTO> addFriend(@PathVariable String username,
                                                    @PathVariable String friendUsername,
                                                    @AuthenticationPrincipal User currentUser) {
        if (!currentUser.getUsername().equals(username)) {
            return ResponseEntity.status(403).build();
        }

        return ResponseEntity.ok(userProfileService.addFriend(username, friendUsername));
    }

    // üîπ –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞
    @DeleteMapping("/{username}/friends/{friendUsername}")
    public ResponseEntity<UserProfileDTO> removeFriend(@PathVariable String username,
                                                       @PathVariable String friendUsername,
                                                       @AuthenticationPrincipal User currentUser) {
        if (!currentUser.getUsername().equals(username)) {
            return ResponseEntity.status(403).build();
        }

        return ResponseEntity.ok(userProfileService.removeFriend(username, friendUsername));
    }
}
